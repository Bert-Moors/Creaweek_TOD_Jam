#include "pch.h"
#include <iostream>
#include "Game.h"
#include "OAMEntry.h"

OAMEntry entries[40] = {
	OAMEntry{200,200,50}, // fish
	OAMEntry{50,50,44, false, true}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 
	OAMEntry{50,58,44}, // 


};

unsigned char TileLabel[256][16] =
{
	{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,
  0x02,0x03,0x02,0x03,0x05,0x06,0x05,0x06},
	{0x1F,0x1F,0x6F,0x70,0x9F,0xE0,0x7F,0x80,
  0xFD,0x03,0xFE,0x01,0xFD,0x02,0xFF,0xE1},
	{0xC0,0xC0,0xF0,0x30,0xE8,0x18,0xE8,0x18,
  0xF0,0xF0,0x40,0xC0,0xE6,0xE6,0xF9,0x9F},
	{0x05,0x07,0x06,0x07,0x06,0x07,0x03,0x03,
  0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x1E,0xF7,0xC8,0xFF,0xA0,0xFF,0x01,0xFF,
  0xC0,0xFF,0x70,0x7F,0x1F,0x1F,0x11,0x1F},
	{0xF1,0xBF,0x62,0xFE,0x0C,0xFC,0x88,0xF8,
  0x90,0xF0,0x60,0xE0,0x80,0x80,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x03,0x03,0x04,0x07,
  0x04,0x07,0x03,0x03,0x00,0x00,0x00,0x00},
	{0x10,0x1F,0x32,0x3F,0x32,0x3F,0xD2,0xFF,
  0xB3,0xDF,0xB3,0xDE,0xE3,0xFE,0x43,0x7F},
	{0x80,0x80,0xC0,0xC0,0xC0,0x40,0xE0,0x60,
  0xE0,0xA0,0xA0,0x60,0xC0,0xC0,0x40,0xC0},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00},
	{0x73,0x7F,0x27,0x3D,0x1F,0x19,0x3F,0x23,
  0xFF,0xC6,0x7F,0x80,0x3F,0xC0,0xFF,0xFF},
	{0x40,0xC0,0xC0,0x40,0x80,0x80,0xF8,0xF8,
  0xDC,0x34,0xEA,0x1E,0xCA,0x3E,0xFC,0xFC},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x01,0x01,0x02,0x03,0x03,0x02,0x05,0x06},
	{0x00,0x00,0x1F,0x1F,0x6F,0x70,0xBF,0xC0,
  0x7F,0x80,0xFB,0x07,0xFC,0x03,0xFB,0x05},
	{0x00,0x00,0xC0,0xC0,0xF0,0x30,0xE8,0x18,
  0xC8,0x38,0xF0,0xF0,0x40,0xC0,0xE6,0xE6},
	{0x05,0x07,0x06,0x07,0x05,0x07,0x05,0x07,
  0x02,0x03,0x01,0x01,0x00,0x00,0x00,0x00},
	{0xFF,0xC3,0x3D,0xEF,0x90,0xFF,0x40,0xFF,
  0x03,0xFF,0xC1,0xFF,0x70,0x7F,0x2F,0x3F},
	{0xE9,0x2F,0xF1,0x7F,0xC2,0xFE,0x1C,0xFC,
  0x08,0xF8,0x10,0xF0,0xE0,0xE0,0x80,0x80},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x03,
  0x04,0x07,0x05,0x07,0x03,0x03,0x01,0x01},
	{0x21,0x3F,0x50,0x7F,0x50,0x7F,0x90,0xFF,
  0xB8,0xFF,0x1F,0xF7,0x0F,0xF8,0x0F,0xF9},
	{0x00,0x00,0x80,0x80,0x80,0x80,0x70,0xF0,
  0x48,0xF8,0xC8,0xF8,0xC8,0x78,0x70,0xF0},
	{0x01,0x01,0x0E,0x0E,0x17,0x19,0x1E,0x11,
  0x0F,0x08,0x07,0x06,0x01,0x01,0x00,0x00},
	{0x9F,0xF1,0xFE,0xF9,0x9F,0xFC,0x7F,0xFC,
  0xB7,0x7C,0xEF,0x70,0xA7,0xB8,0x7F,0x7F},
	{0x80,0x80,0x80,0x80,0x80,0x80,0xBC,0xBC,
  0xDA,0xE6,0xFD,0x03,0xF9,0x07,0xFE,0xFE},
	{0x01,0x01,0x06,0x07,0x09,0x0E,0x17,0x18,
  0x2F,0x30,0x2F,0x30,0x5F,0x60,0x5F,0x6E},
	{0xFC,0xFC,0xFF,0x03,0xFE,0x01,0xFE,0x01,
  0xDF,0x3F,0xE4,0x1C,0xDE,0x2E,0xFF,0x19},
	{0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,
  0x00,0x00,0x00,0x00,0x60,0x60,0x90,0xF0},
	{0x51,0x7F,0x6C,0x7F,0x6A,0x7F,0x30,0x3F,
  0x1C,0x1F,0x07,0x07,0x01,0x01,0x01,0x01},
	{0xEF,0x7B,0x86,0xFF,0x00,0xFF,0x00,0xFF,
  0x01,0xFF,0x06,0xFE,0xF8,0xF8,0x0C,0xFC},
	{0x10,0xF0,0x20,0xE0,0xC0,0xC0,0x80,0x80,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	{0x01,0x01,0x02,0x03,0x32,0x33,0x4D,0x7F,
  0x4B,0x7C,0x3B,0x3C,0x0B,0x0C,0x07,0x06},
	{0x02,0xFE,0x11,0xFF,0x08,0xFF,0x06,0xFF,
  0xFF,0xFB,0xFA,0x06,0xFC,0x2C,0xF4,0x1C},
	{0x00,0x00,0x98,0x98,0x66,0xFE,0x01,0xFF,
  0x01,0xFF,0xC1,0xFF,0x22,0x3E,0x1E,0x1E},
	{0x03,0x03,0x01,0x01,0x01,0x01,0x03,0x02,
  0x0F,0x0C,0x17,0x18,0x13,0x1C,0x0F,0x0F},
	{0xF4,0x9C,0xFC,0x14,0xF8,0x18,0xFF,0x3F,
  0xFD,0x63,0xFE,0x01,0xFC,0x03,0xFF,0xFF},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,
  0xC0,0x40,0xA0,0xE0,0xA0,0xE0,0xC0,0xC0},
	{0x18,0x18,0x64,0x7C,0xA2,0xFE,0xAF,0xFF,
  0xDF,0xB5,0xDF,0xB1,0xEF,0x9F,0xE1,0x9F},
	{0xF9,0x9F,0x7D,0x67,0x7E,0x7E,0x24,0x3C,
  0x66,0x7E,0xF1,0x8F,0xFF,0xFF,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01},
	{0x01,0x03,0x03,0x07,0x07,0x07,0x0F,0x0C,
  0x1F,0x1C,0x38,0x3B,0x30,0x30,0x00,0x00},
	{0x00,0x00,0x00,0x06,0x06,0x0E,0x0E,0x1E,
  0x1C,0x3E,0x38,0x7A,0x70,0xF2,0xE0,0xE2},
	{0xC0,0xC2,0x80,0x82,0x00,0x04,0x00,0x84,
  0x00,0x88,0x28,0x00,0x30,0x00,0x00,0x00},
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01},
	{0x01,0x03,0x03,0x07,0x07,0x07,0x0F,0x0C,
  0x1F,0x1C,0x38,0x3B,0x30,0x30,0x00,0x00},
	{0x00,0x00,0x00,0x06,0x06,0x0E,0x0E,0x1E,
  0x1C,0x3E,0x38,0x7A,0x70,0xF2,0xE0,0xE2},
	{0xC0,0xC2,0x80,0x82,0x00,0x02,0x00,0x82,
  0x00,0x82,0x00,0x02,0x00,0x02,0x00,0x02},
	{0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02,
  0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x02},
	{0x00,0x02,0x00,0x02,0x00,0x02,0x00,0x04,
  0x00,0x04,0x14,0x00,0x18,0x00,0x00,0x00},
	{0xFF,0xFF,0x81,0x81,0x81,0x81,0x81,0x81,
  0x81,0x81,0x81,0x81,0x81,0x81,0x81,0x81},
	{0x81,0x81,0x81,0x81,0x81,0x81,0x81,0x81,
  0x81,0x81,0x81,0x81,0x81,0x81,0x81,0x81},
		{0x00,0x18,0x08,0x34,0x00,0x3C,0x00,0x3C,
  0x00,0x18,0x00,0x3C,0x00,0x24,0x00,0x00},
		{0x7E,0x00,0x7E,0x00,0x7E,0x00,0x7E,0x00,
  0x7E,0x00,0x7E,0x00,0x7E,0x00,0x7E,0x00},
};

Game::Game( const Window& window ) 
	:m_Window{ window }
	,m_Level{entries}
{
	Initialize( );
}

Game::~Game( )
{
	Cleanup( );
}

void Game::Initialize( )
{
}

void Game::Cleanup( )
{
	// Walk cycle 0-11 and 12-22
	// Fishing 23-35
	// Fish 36-37
	// Fishing pole 38
	// 
}

void Game::Update( float elapsedSec )
{
	m_Level.Update(elapsedSec);

	// Check keyboard state
	//const Uint8 *pStates = SDL_GetKeyboardState( nullptr );
	//if ( pStates[SDL_SCANCODE_RIGHT] )
	//{
	//	std::cout << "Right arrow key is down\n";
	//}
	//if ( pStates[SDL_SCANCODE_LEFT] && pStates[SDL_SCANCODE_UP])
	//{
	//	std::cout << "Left and up arrow keys are down\n";
	//}
}

void Game::Draw( ) const
{
	ClearBackground( );

	unsigned char backGround[256][16];

	unsigned char grid[1024]; 
	unsigned char x{0};
	unsigned char y{0};

	m_Level.Draw(TileLabel, backGround, entries, grid, x, y);
	/*switch (m_State) {
		case GameState::loading:
			break;
		case GameState::finishing:
			break;
		case GameState::playing:
			m_Player.Draw();
			m_Fish.Draw();
			m_Bar.Draw();
			break;
	}*/

}

void Game::ProcessKeyDownEvent( const SDL_KeyboardEvent & e )
{
	//std::cout << "KEYDOWN event: " << e.keysym.sym << std::endl;
}

void Game::ProcessKeyUpEvent( const SDL_KeyboardEvent& e )
{
	//std::cout << "KEYUP event: " << e.keysym.sym << std::endl;
	//switch ( e.keysym.sym )
	//{
	//case SDLK_LEFT:
	//	//std::cout << "Left arrow key released\n";
	//	break;
	//case SDLK_RIGHT:
	//	//std::cout << "`Right arrow key released\n";
	//	break;
	//case SDLK_1:
	//case SDLK_KP_1:
	//	//std::cout << "Key 1 released\n";
	//	break;
	//}
}

void Game::ProcessMouseMotionEvent( const SDL_MouseMotionEvent& e )
{
	//std::cout << "MOUSEMOTION event: " << e.x << ", " << e.y << std::endl;
}

void Game::ProcessMouseDownEvent( const SDL_MouseButtonEvent& e )
{
	//std::cout << "MOUSEBUTTONDOWN event: ";
	//switch ( e.button )
	//{
	//case SDL_BUTTON_LEFT:
	//	std::cout << " left button " << std::endl;
	//	break;
	//case SDL_BUTTON_RIGHT:
	//	std::cout << " right button " << std::endl;
	//	break;
	//case SDL_BUTTON_MIDDLE:
	//	std::cout << " middle button " << std::endl;
	//	break;
	//}
}

void Game::ProcessMouseUpEvent( const SDL_MouseButtonEvent& e )
{
	//std::cout << "MOUSEBUTTONUP event: ";
	//switch ( e.button )
	//{
	//case SDL_BUTTON_LEFT:
	//	std::cout << " left button " << std::endl;
	//	break;
	//case SDL_BUTTON_RIGHT:
	//	std::cout << " right button " << std::endl;
	//	break;
	//case SDL_BUTTON_MIDDLE:
	//	std::cout << " middle button " << std::endl;
	//	break;
	//}
}

void Game::ClearBackground( ) const
{
	glClearColor( 0.0f, 0.0f, 0.3f, 1.0f );
	glClear( GL_COLOR_BUFFER_BIT );
}

